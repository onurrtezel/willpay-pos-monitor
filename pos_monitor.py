"""
POS Monitor - Mevcut POS Sisteminden Veri √áekme
UI Automation ile ba≈üka bir POS programƒ±ndan veri okur ve WillPay'e g√∂nderir
"""
import time
import sys
import requests
from datetime import datetime
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLabel, QTextEdit, QDialog
)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QFont
import qrcode
from io import BytesIO
from PyQt6.QtGui import QPixmap

# Windows-only import
try:
    from pywinauto import Desktop, Application
    from pywinauto.findwindows import ElementNotFoundError
    WINDOWS_AVAILABLE = True
except ImportError:
    WINDOWS_AVAILABLE = False
    print("‚ö†Ô∏è pywinauto not available. This app works only on Windows.")

BACKEND_URL = "http://192.168.1.103:8000"


class QRPopup(QDialog):
    """QR Code popup dialog"""
    
    def __init__(self, qr_url, receipt_data, parent=None):
        super().__init__(parent)
        self.setWindowTitle("QR Fi≈ü - WillPay")
        self.setModal(True)
        self.resize(500, 600)
        
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # Title
        title = QLabel("‚úÖ Fi≈ü Hazƒ±r!")
        title.setFont(QFont("Arial", 20, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # QR Code
        qr_label = QLabel()
        qr_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        qr_label.setStyleSheet("background: white; padding: 20px; border-radius: 10px;")
        
        # Generate QR code
        qr = qrcode.QRCode(version=1, box_size=10, border=2)
        qr.add_data(qr_url)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        
        # Convert to QPixmap
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        buffer.seek(0)
        pixmap = QPixmap()
        pixmap.loadFromData(buffer.read())
        
        qr_label.setPixmap(pixmap.scaled(300, 300, Qt.AspectRatioMode.KeepAspectRatio))
        layout.addWidget(qr_label)
        
        # Receipt info
        info_label = QLabel(f"Toplam: {receipt_data['total']}‚Ç∫\n√úr√ºn Sayƒ±sƒ±: {receipt_data['item_count']}")
        info_label.setFont(QFont("Arial", 14))
        info_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(info_label)
        
        # Close button
        close_btn = QPushButton("Kapat")
        close_btn.setFont(QFont("Arial", 12))
        close_btn.setStyleSheet("""
            QPushButton {
                background: #3498db;
                color: white;
                border: none;
                padding: 12px;
                border-radius: 8px;
            }
            QPushButton:hover {
                background: #2980b9;
            }
        """)
        close_btn.clicked.connect(self.accept)
        layout.addWidget(close_btn)
        
        self.setLayout(layout)


class POSMonitor(QMainWindow):
    """POS Monitor - Ba≈üka POS sisteminden veri √ßeken ana uygulama"""
    
    def __init__(self):
        super().__init__()
        self.pos_window = None
        self.is_monitoring = False
        self.last_receipt_data = None
        self.last_total_amount = None  # Son toplam tutar
        self.last_item_count = None    # Son √ºr√ºn sayƒ±sƒ±
        self.auto_start_enabled = True  # Otomatik ba≈ülatma aktif
        self.init_ui()
        
        # Auto-scan timer - HIZLANDIRILDI
        self.scan_timer = QTimer()
        self.scan_timer.timeout.connect(self.scan_pos)
        
        # Otomatik ba≈ülatma timer
        self.startup_timer = QTimer()
        self.startup_timer.timeout.connect(self.auto_start)
        self.startup_timer.setSingleShot(True)
        self.startup_timer.start(2000)  # 2 saniye sonra otomatik ba≈ülat
        
    def init_ui(self):
        """Initialize UI"""
        self.setWindowTitle("WillPay POS Monitor - Otomatik Mod")
        self.setGeometry(100, 100, 800, 600)
        
        main_widget = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Title
        title = QLabel("üîç WillPay POS Monitor")
        title.setFont(QFont("Arial", 20, QFont.Weight.Bold))
        title.setStyleSheet("color: #2c3e50; padding: 10px;")
        layout.addWidget(title)
        
        # Auto-start info
        auto_info = QLabel("üöÄ Otomatik Mod: Program a√ßƒ±lƒ±nca POS'a baƒülanƒ±r ve izlemeyi ba≈ülatƒ±r")
        auto_info.setFont(QFont("Arial", 10))
        auto_info.setStyleSheet("""
            background: #d5f4e6;
            color: #27ae60;
            padding: 10px;
            border-radius: 5px;
            font-weight: bold;
        """)
        auto_info.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(auto_info)
        
        # Status
        self.status_label = QLabel("Durum: Otomatik ba≈ülatma bekliyor...")
        self.status_label.setFont(QFont("Arial", 12))
        self.status_label.setStyleSheet("""
            background: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
        """)
        layout.addWidget(self.status_label)
        
        # POS Window Info
        info_layout = QVBoxLayout()
        
        label1 = QLabel("üìù ƒ∞zlenecek POS Programƒ±:")
        label1.setFont(QFont("Arial", 11, QFont.Weight.Bold))
        info_layout.addWidget(label1)
        
        self.pos_name_input = QLabel("Pencere adƒ±nƒ± giriniz (√∂rn: 'Restaurant POS', 'TouchBistro', vs.)")
        self.pos_name_input.setStyleSheet("""
            background: white;
            padding: 10px;
            border: 1px solid #bdc3c7;
            border-radius: 5px;
        """)
        info_layout.addWidget(self.pos_name_input)
        
        layout.addLayout(info_layout)
        
        # Buttons
        btn_layout = QHBoxLayout()
        
        self.connect_btn = QPushButton("üîó POS'a Baƒülan")
        self.connect_btn.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        self.connect_btn.setFixedHeight(50)
        self.connect_btn.setStyleSheet("""
            QPushButton {
                background: #3498db;
                color: white;
                border: none;
                border-radius: 8px;
            }
            QPushButton:hover {
                background: #2980b9;
            }
        """)
        self.connect_btn.clicked.connect(self.connect_to_pos)
        btn_layout.addWidget(self.connect_btn)
        
        self.start_btn = QPushButton("‚ñ∂Ô∏è ƒ∞zlemeyi Ba≈ülat")
        self.start_btn.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        self.start_btn.setFixedHeight(50)
        self.start_btn.setEnabled(False)
        self.start_btn.setStyleSheet("""
            QPushButton {
                background: #27ae60;
                color: white;
                border: none;
                border-radius: 8px;
            }
            QPushButton:hover:enabled {
                background: #229954;
            }
            QPushButton:disabled {
                background: #95a5a6;
            }
        """)
        self.start_btn.clicked.connect(self.toggle_monitoring)
        btn_layout.addWidget(self.start_btn)
        
        self.send_btn = QPushButton("üì§ Manuel G√∂nder")
        self.send_btn.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        self.send_btn.setFixedHeight(50)
        self.send_btn.setEnabled(False)
        self.send_btn.setStyleSheet("""
            QPushButton {
                background: #e67e22;
                color: white;
                border: none;
                border-radius: 8px;
            }
            QPushButton:hover:enabled {
                background: #d35400;
            }
            QPushButton:disabled {
                background: #95a5a6;
            }
        """)
        self.send_btn.clicked.connect(self.manual_send)
        btn_layout.addWidget(self.send_btn)
        
        layout.addLayout(btn_layout)
        
        # Log area
        log_label = QLabel("üìã Log:")
        log_label.setFont(QFont("Arial", 11, QFont.Weight.Bold))
        layout.addWidget(log_label)
        
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)
        self.log_area.setStyleSheet("""
            background: #2c3e50;
            color: #ecf0f1;
            font-family: 'Courier New';
            font-size: 11px;
            padding: 10px;
            border-radius: 8px;
        """)
        layout.addWidget(self.log_area)
        
        main_widget.setLayout(layout)
        self.setCentralWidget(main_widget)
    
    def auto_start(self):
        """Otomatik ba≈ülatma - Program a√ßƒ±lƒ±nca POS'a baƒülan ve izlemeyi ba≈ülat"""
        if not self.auto_start_enabled:
            return
        
        self.log("üöÄ Otomatik ba≈ülatma aktif...")
        self.log("üí° 2 saniye sonra POS aranacak ve izleme ba≈ülayacak")
        
        # POS'a baƒülan
        self.connect_to_pos()
        
        # Eƒüer baƒülanƒ±ldƒ±ysa, izlemeyi ba≈ülat
        if self.pos_window is not None:
            # 1 saniye bekle
            QTimer.singleShot(1000, self.start_monitoring_auto)
        else:
            self.log("‚ö†Ô∏è POS bulunamadƒ± - Manuel olarak baƒülanmanƒ±z gerekiyor")
    
    def start_monitoring_auto(self):
        """Otomatik izlemeyi ba≈ülat"""
        if not self.is_monitoring and self.pos_window is not None:
            self.log("üîÑ ƒ∞zleme otomatik ba≈ülatƒ±lƒ±yor...")
            self.toggle_monitoring()
        
    def log(self, message):
        """Add log message"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_area.append(f"[{timestamp}] {message}")
        
    def connect_to_pos(self):
        """Connect to POS window - Otomatik algƒ±lama"""
        if not WINDOWS_AVAILABLE:
            self.log("‚ùå Bu √∂zellik sadece Windows'ta √ßalƒ±≈üƒ±r!")
            return
        
        self.log("üîç POS penceresi aranƒ±yor...")
        
        try:
            desktop = Desktop(backend="uia")
            windows = desktop.windows()
            
            self.log(f"üìä {len(windows)} pencere bulundu")
            
            # POS programƒ± anahtar kelimeleri (otomatik algƒ±lama i√ßin)
            pos_keywords = [
                # Genel
                'POS', 'Point of Sale', 'Restaurant', 'Retail',
                'Kasa', 'Satƒ±≈ü', 'Fi≈ü', 'Kasiyerim',
                # Kendi POS'umuz
                'Granny', 'Waffle',  # ‚Üê pos_ui.py i√ßin
                # Uluslararasƒ±
                'Loyverse', 'Square', 'Toast', 'Clover',
                'TouchBistro', 'Lightspeed', 'Revel',
                'Micros', 'NCR', 'Aloha', 'Maitre',
                'Odoo',  # ‚Üê Odoo i√ßin
                # T√ºrk Programlar
                'Logo', 'Nebim', 'Mikro', 'Param',
                # Test i√ßin
                'Sale', 'Cash Register', 'Checkout'
            ]
            
            # T√ºm pencereleri tara ve POS olanƒ± bul
            pos_windows = []
            other_windows = []
            
            for i, window in enumerate(windows):
                try:
                    title = window.window_text()
                    if not title or len(title) < 3:
                        continue
                    
                    # Sistem pencerelerini atla
                    skip_keywords = ['Program Manager', 'MSCTFIME UI', 'Default IME']
                    if any(skip in title for skip in skip_keywords):
                        continue
                    
                    # POS programƒ± mƒ± kontrol et
                    is_pos = any(keyword.lower() in title.lower() for keyword in pos_keywords)
                    
                    if is_pos:
                        self.log(f"  ‚úÖ POS bulundu: {title}")
                        pos_windows.append((title, window))
                    else:
                        self.log(f"  ‚ÑπÔ∏è  Diƒüer: {title}")
                        other_windows.append((title, window))
                        
                except:
                    pass
            
            # POS penceresi bulundu mu?
            if pos_windows:
                # ƒ∞lk POS penceresini se√ß
                selected_title, selected_window = pos_windows[0]
                self.pos_window = selected_window
                
                self.pos_name_input.setText(f"‚úÖ Otomatik Bulundu: {selected_title}")
                self.status_label.setText(f"Durum: Baƒülƒ± - {selected_title}")
                self.status_label.setStyleSheet("""
                    background: #d5f4e6;
                    color: #27ae60;
                    padding: 15px;
                    border-radius: 8px;
                    font-weight: bold;
                """)
                self.start_btn.setEnabled(True)
                self.send_btn.setEnabled(True)
                
                self.log(f"‚úÖ POS penceresine otomatik baƒülanƒ±ldƒ±: {selected_title}")
                
                if len(pos_windows) > 1:
                    self.log(f"‚ÑπÔ∏è  Not: {len(pos_windows)} POS penceresi bulundu, ilki se√ßildi")
                    
            elif other_windows:
                # POS bulunamadƒ± ama ba≈üka pencereler var
                self.log("‚ö†Ô∏è POS penceresi otomatik algƒ±lanamadƒ±!")
                self.log(f"‚ÑπÔ∏è  {len(other_windows)} ba≈üka pencere bulundu:")
                
                for i, (title, _) in enumerate(other_windows[:5], 1):
                    self.log(f"     {i}. {title}")
                
                # ƒ∞lk pencereyi manuel se√ßim i√ßin √∂ner
                if other_windows:
                    self.log(f"üí° ƒ∞lk pencereye baƒülanƒ±lƒ±yor: {other_windows[0][0]}")
                    self.pos_window = other_windows[0][1]
                    self.pos_name_input.setText(f"‚ö†Ô∏è Manuel: {other_windows[0][0]}")
                    self.status_label.setText(f"Durum: Manuel - {other_windows[0][0]}")
                    self.status_label.setStyleSheet("""
                        background: #fff3cd;
                        color: #856404;
                        padding: 15px;
                        border-radius: 8px;
                        font-weight: bold;
                    """)
                    self.start_btn.setEnabled(True)
                    self.send_btn.setEnabled(True)
            else:
                self.log("‚ùå Hi√ß uygun pencere bulunamadƒ±!")
                
        except Exception as e:
            self.log(f"‚ùå Hata: {str(e)}")
            
    def toggle_monitoring(self):
        """Start/stop monitoring"""
        if not self.is_monitoring:
            self.is_monitoring = True
            self.start_btn.setText("‚è∏Ô∏è ƒ∞zlemeyi Durdur")
            self.scan_timer.start(500)  # S√úREKLI: Her 0.5 saniyede (500ms)
            self.log("‚ñ∂Ô∏è ƒ∞zleme ba≈ülatƒ±ldƒ± (s√ºrekli tarama - 0.5s aralƒ±k)")
            self.log("üí° Deƒüi≈üiklik algƒ±landƒ±ƒüƒ±nda otomatik g√∂nderilecek")
        else:
            self.is_monitoring = False
            self.start_btn.setText("‚ñ∂Ô∏è ƒ∞zlemeyi Ba≈ülat")
            self.scan_timer.stop()
            self.last_total_amount = None
            self.last_item_count = None
            self.log("‚è∏Ô∏è ƒ∞zleme durduruldu")
            
    def scan_pos(self):
        """Scan POS window for receipt data - DEƒûƒ∞≈ûƒ∞KLƒ∞K ALGILAMALI"""
        if not self.pos_window:
            return
        
        try:
            # T√ºm text elementlerini bul
            texts = []
            numbers = []  # Sayƒ±sal deƒüerler (fiyatlar)
            
            try:
                controls = self.pos_window.descendants()
                for control in controls:
                    try:
                        if control.control_type() == "Text":
                            text = control.window_text()
                            if text and len(text) > 0:
                                texts.append(text)
                                
                                # Sayƒ± i√ßeren metinleri ayƒ±r (fiyat, tutar)
                                if any(char.isdigit() for char in text):
                                    numbers.append(text)
                    except:
                        pass
            except:
                pass
            
            if not texts:
                return
            
            # Toplam tutar ve √ºr√ºn sayƒ±sƒ±nƒ± bulmaya √ßalƒ±≈ü
            current_total = self.extract_total(texts, numbers)
            current_item_count = len([t for t in texts if any(kw in t.lower() for kw in ['‚Ç∫', 'tl', 'lira', '$'])])
            
            # DEƒûƒ∞≈ûƒ∞KLƒ∞K ALGILAMA
            if current_total is not None:
                # ƒ∞lk okuma
                if self.last_total_amount is None:
                    self.last_total_amount = current_total
                    self.last_item_count = current_item_count
                    self.log(f"üìä ƒ∞lk okuma: {current_total}‚Ç∫ - {current_item_count} √∂ƒüe")
                    
                # Deƒüi≈üiklik var mƒ±?
                elif current_total != self.last_total_amount:
                    self.log(f"üîî DEƒûƒ∞≈ûƒ∞KLƒ∞K ALGILANDI!")
                    self.log(f"   √ñnceki: {self.last_total_amount}‚Ç∫ ‚Üí Yeni: {current_total}‚Ç∫")
                    
                    # Tutar arttƒ±ysa (yeni √ºr√ºn eklendi)
                    if current_total > self.last_total_amount:
                        self.log(f"   ‚ûï √úr√ºn eklendi")
                        
                    # Tutar azaldƒ±ysa (√ºr√ºn √ßƒ±karƒ±ldƒ±)
                    elif current_total < self.last_total_amount:
                        self.log(f"   ‚ûñ √úr√ºn √ßƒ±karƒ±ldƒ±")
                    
                    # Tutar 0'a d√∂nd√ºyse (√∂deme tamamlandƒ± - OTOMATIK G√ñNDER)
                    if self.last_total_amount > 0 and current_total == 0:
                        self.log(f"üí≥ √ñDEME TAMAMLANDI! Otomatik g√∂nderiliyor...")
                        self.auto_send_receipt(self.last_total_amount)
                    
                    # G√ºncel deƒüerleri kaydet
                    self.last_total_amount = current_total
                    self.last_item_count = current_item_count
                else:
                    # Deƒüi≈üiklik yok - sessiz tarama
                    pass
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è Tarama hatasƒ±: {str(e)}")
    
    def extract_total(self, texts, numbers):
        """Metinlerden toplam tutarƒ± √ßƒ±kar"""
        try:
            # "Toplam", "Total", "TOTAL", "Tutar" gibi anahtar kelimeler ara
            total_keywords = ['toplam', 'total', 'tutar', '√∂denecek', 'toplam tutar']
            
            for i, text in enumerate(texts):
                text_lower = text.lower()
                
                # Anahtar kelime var mƒ±?
                if any(kw in text_lower for kw in total_keywords):
                    # Hemen yanƒ±ndaki sayƒ±yƒ± bul
                    for j in range(max(0, i-2), min(len(texts), i+3)):
                        try:
                            # Sayƒ±yƒ± √ßƒ±kar
                            num_text = texts[j].replace('‚Ç∫', '').replace('TL', '').replace(',', '.').strip()
                            num = float(''.join(c for c in num_text if c.isdigit() or c == '.'))
                            if num > 0:
                                return num
                        except:
                            pass
            
            # Bulunamadƒ±ysa, en b√ºy√ºk sayƒ±yƒ± al (muhtemelen toplam)
            max_num = 0
            for num_text in numbers:
                try:
                    cleaned = num_text.replace('‚Ç∫', '').replace('TL', '').replace(',', '.').strip()
                    num = float(''.join(c for c in cleaned if c.isdigit() or c == '.'))
                    if num > max_num:
                        max_num = num
                except:
                    pass
            
            return max_num if max_num > 0 else None
            
        except:
            return None
    
    def auto_send_receipt(self, total_amount):
        """Otomatik fi≈ü g√∂nder - √ñdeme tamamlandƒ±ƒüƒ±nda"""
        self.log(f"üì§ Otomatik g√∂nderim: {total_amount}‚Ç∫")
        
        # Demo receipt data
        receipt_data = {
            "user_id": 1,
            "store_name": "Granny's Waffle",
            "date": datetime.now().strftime("%Y-%m-%d"),
            "total_amount": total_amount,
            "category": "food",
            "is_favorite": False,
            "notes": "POS Monitor - Otomatik G√∂nderim",
            "image_url": None,
            "items": [
                {"name": "POS √úr√ºn", "price": total_amount, "quantity": 1, "category": "general"}
            ]
        }
        
        self.send_to_backend(receipt_data)
            
    def manual_send(self):
        """Manually send receipt to backend"""
        self.log("üì§ Manuel g√∂nderim ba≈ülatƒ±ldƒ±...")
        
        # Demo data - ger√ßekte POS'tan okunmalƒ±
        receipt_data = {
            "user_id": 1,
            "store_name": "Granny's Waffle",
            "date": datetime.now().strftime("%Y-%m-%d"),
            "total_amount": 90.0,
            "category": "food",
            "is_favorite": False,
            "notes": "POS Monitor - Manuel G√∂nderim",
            "image_url": None,
            "items": [
                {"name": "√áikolatalƒ± Waffle", "price": 35.0, "quantity": 1, "category": "waffle"},
                {"name": "T√ºrk Kahvesi", "price": 15.0, "quantity": 1, "category": "kahve"}
            ]
        }
        
        self.send_to_backend(receipt_data)
        
    def send_to_backend(self, receipt_data):
        """Send receipt to WillPay backend"""
        try:
            self.log(f"üì§ Backend'e g√∂nderiliyor: {BACKEND_URL}/receipts")
            
            response = requests.post(
                f"{BACKEND_URL}/receipts",
                json=receipt_data,
                timeout=10
            )
            
            if response.status_code in [200, 201]:
                result = response.json()
                
                # Handle array response
                if isinstance(result, list):
                    receipt_id = result[0]
                    total = float(result[4])
                else:
                    receipt_id = result.get('id')
                    total = result.get('totalAmount', receipt_data['total_amount'])
                
                self.log(f"‚úÖ Fi≈ü olu≈üturuldu: ID={receipt_id}")
                
                # QR URL olu≈ütur
                import json
                from urllib.parse import quote
                
                store_name = receipt_data['store_name']
                items_json = json.dumps(receipt_data['items'])
                
                store_encoded = quote(store_name)
                items_encoded = quote(items_json)
                
                qr_url = f"{BACKEND_URL}/receipt/new?amount={total}&store={store_encoded}&items={items_encoded}"
                
                # QR popup g√∂ster
                popup_data = {
                    'total': total,
                    'item_count': len(receipt_data['items'])
                }
                
                dialog = QRPopup(qr_url, popup_data, self)
                dialog.exec()
                
                self.log("‚úÖ QR kod g√∂sterildi!")
                
            else:
                self.log(f"‚ùå Backend hatasƒ±: {response.status_code}")
                self.log(f"   {response.text[:200]}")
                
        except requests.exceptions.ConnectionError:
            self.log(f"‚ùå Backend'e baƒülanƒ±lamadƒ±: {BACKEND_URL}")
        except Exception as e:
            self.log(f"‚ùå Hata: {str(e)}")


def main():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    
    window = POSMonitor()
    window.show()
    
    sys.exit(app.exec())


if __name__ == '__main__':
    main()


